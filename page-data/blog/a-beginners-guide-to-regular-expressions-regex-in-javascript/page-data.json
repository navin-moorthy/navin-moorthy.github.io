{"componentChunkName":"component---src-blog-components-blog-post-template-jsx","path":"/blog/a-beginners-guide-to-regular-expressions-regex-in-javascript/","webpackCompilationHash":"6eefe375ec1aecc7d307","result":{"data":{"markdownRemark":{"id":"8d38633a-5322-5696-b5de-d38271f41541","excerpt":"üöÄ A Practical Guide to Regular Expressions (RegEx) In JavaScript üë®‚Äçüíª By Sukhjinder Arora ‚úç Practise Regex at regex101 Hackerrank ‚ô¶ References MDN Regular‚Ä¶","html":"<p>üöÄ <a href=\"https://blog.bitsrc.io/a-beginners-guide-to-regular-expressions-regex-in-javascript-9c58feb27eb4\" target=\"_blank\" rel=\"noopener\">A Practical Guide to Regular Expressions (RegEx) In JavaScript</a></p>\n<p>üë®‚Äçüíª By <a href=\"https://blog.bitsrc.io/@Sukhjinder\" target=\"_blank\" rel=\"noopener\">Sukhjinder Arora</a></p>\n<p>‚úç Practise</p>\n<ul>\n<li>Regex at <a href=\"https://regex101.com/\" target=\"_blank\" rel=\"noopener\">regex101</a></li>\n<li><a href=\"https://www.hackerrank.com/domains/regex\" target=\"_blank\" rel=\"noopener\">Hackerrank</a></li>\n</ul>\n<p>‚ô¶ References</p>\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions\" target=\"_blank\" rel=\"noopener\">MDN Regular Expression</a></li>\n</ul>\n<h2 id=\"regular-expressions\"><a href=\"#regular-expressions\" aria-label=\"regular expressions permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Regular Expressions</h2>\n<p>Regular expressions are a way to describe patterns in a string data.</p>\n<p><code class=\"language-text\">Creating a Regular Expression</code></p>\n<p>There are two ways to create a regular expression in Javascript. It can be either created with RegExp constructor, or by using forward slashes ( / ) to enclose the pattern.</p>\n<p><code class=\"language-text\">Regular Expression Constructor:</code></p>\n<p><strong>Syntax:</strong> <code class=\"language-text\">new RegExp(pattern[, flags])</code></p>\n<p><strong>Example:</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> regexConst <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RegExp</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">Regular Expression Literal:</code></p>\n<p><strong>Syntax:</strong> <code class=\"language-text\">/pattern/flags</code></p>\n<p><strong>Example:</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> regexLiteral <span class=\"token operator\">=</span> <span class=\"token regex\">/abc/</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><strong>Note:</strong> Here the flags are optional</p>\n<blockquote>\n<p>Since forward slashes are used to enclose patterns in the above example, you have to escape the forward slash ( / ) with a backslash ( \\ ) if you want to use it as a part of the regex.</p>\n</blockquote>\n<p><code class=\"language-text\">Regular Expressions Methods</code></p>\n<p><code class=\"language-text\">RegExp.prototype.test()</code></p>\n<p>This method is used to test whether a match has been found or not. It accepts a string which we have to test against regular expression and returns true or false depending upon if the match is found or not.</p>\n<p><strong>For example:</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> regex <span class=\"token operator\">=</span> <span class=\"token regex\">/hello/</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> regex<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// returns true</span></code></pre></div>\n<p><code class=\"language-text\">RegExp.prototype.exec()</code></p>\n<p>This method returns an array containing all the matched groups. It accepts a string that we have to test against a regular expression.</p>\n<p><strong>For example:</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> regex <span class=\"token operator\">=</span> <span class=\"token regex\">/hello/</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> regex<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// returns [ 'hello', index: 0, input: 'hello world', groups: undefined ]</span>\n<span class=\"token comment\">// 'hello' -> is the matched pattern.</span>\n<span class=\"token comment\">// index: -> Is where the regular expression starts.</span>\n<span class=\"token comment\">// input: -> Is the actual string passed.</span></code></pre></div>\n<p><code class=\"language-text\">Flags:</code></p>\n<p>Regular expressions have five optional flags or modifiers. Let‚Äôs discuss the two most important flags:</p>\n<ul>\n<li><code class=\"language-text\">g</code> ‚Äî Global search, don‚Äôt return after the first match</li>\n<li><code class=\"language-text\">i</code> ‚Äî Case-insensitive search</li>\n</ul>\n<p><code class=\"language-text\">Regular Expression Literal</code></p>\n<p><strong>Syntax</strong> <code class=\"language-text\">/pattern/flags</code></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> regexGlobal <span class=\"token operator\">=</span> <span class=\"token regex\">/abc/g</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>regexGlobal<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"abc abc\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// it will match all the occurence of 'abc', so it won't return</span>\n<span class=\"token comment\">// after first match.</span>\n<span class=\"token keyword\">var</span> regexInsensitive <span class=\"token operator\">=</span> <span class=\"token regex\">/abc/i</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>regexInsensitive<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Abc\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// returns true, because the case of string characters don't matter</span>\n<span class=\"token comment\">// in case-insensitive search.</span></code></pre></div>\n<p><code class=\"language-text\">Regular Expression Constructor</code></p>\n<p><strong>Syntax</strong> <code class=\"language-text\">new RegExp(&#39;pattern&#39;, &#39;flags&#39;)</code></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> regexGlobal <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RegExp</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"g\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>regexGlobal<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"abc abc\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// it will match all the occurence of 'abc', so it won't return // after first match.</span>\n<span class=\"token keyword\">var</span> regexInsensitive <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RegExp</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"i\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>regexInsensitive<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Abc\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// returns true, because the case of string characters don't matter // in case-insensitive search.</span></code></pre></div>\n<p><code class=\"language-text\">Character groups:</code></p>\n<p><strong>Character set [xyz]</strong></p>\n<p>A character set is a way to match different characters in a single position, it matches any single character in the string from characters present inside the brackets.</p>\n<p><strong>For example:</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> regex <span class=\"token operator\">=</span> <span class=\"token regex\">/[bt]ear/</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>regex<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"tear\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// returns true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>regex<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bear\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// return true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>regex<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fear\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// return false</span></code></pre></div>\n<p><strong>Note ‚Äî</strong> All the special characters except for caret (^) (Which has entirely different meaning inside the character set) lose their special meaning inside the character set.</p>\n<p><code class=\"language-text\">Negated character set [^xyz]</code></p>\n<p>It matches anything that is not enclosed in the brackets.</p>\n<p><strong>For example:</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> regex <span class=\"token operator\">=</span> <span class=\"token regex\">/[^bt]ear/</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>regex<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"tear\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// returns false</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>regex<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bear\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// return false</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>regex<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fear\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// return true</span></code></pre></div>\n<p><code class=\"language-text\">Ranges [a-z]</code></p>\n<p>Suppose we want to match all of the letters of an alphabet in a single position, we could write all the letters inside the brackets, but there is an easier way and that is ranges.</p>\n<p><strong>For example:</strong></p>\n<p>[a-h] will match all the letters from a to h. Ranges can also be digits like [0-9] or capital letters like [A-Z].</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> regex <span class=\"token operator\">=</span> <span class=\"token regex\">/[a-z]ear/</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>regex<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fear\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// returns true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>regex<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"tear\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// returns true</span></code></pre></div>\n<p><code class=\"language-text\">Meta-characters</code></p>\n<p>Meta-characters are characters with a special meaning. There are many meta character but I am going to cover the most important ones here.</p>\n<ul>\n<li><code class=\"language-text\">\\d</code> ‚Äî Match any digit character ( same as [0-9] ).</li>\n<li><code class=\"language-text\">\\w</code> ‚Äî Match any word character. A word character is any letter, digit, and underscore. (Same as [a-zA-Z0‚Äì9_] ) i.e alphanumeric character.</li>\n<li><code class=\"language-text\">\\s</code> ‚Äî Match a whitespace character (spaces, tabs etc).</li>\n<li><code class=\"language-text\">\\t</code> ‚Äî Match a tab character only.</li>\n<li><code class=\"language-text\">\\b</code> ‚Äî Find a match at beginning or ending of a word. Also known as word boundary.</li>\n<li><code class=\"language-text\">.</code> ‚Äî (period) Matches any character except for newline.</li>\n<li><code class=\"language-text\">\\D</code> ‚Äî Match any non digit character (same as <sup id=\"fnref-0‚Äì9\"><a href=\"#fn-0‚Äì9\" class=\"footnote-ref\">0‚Äì9</a></sup>).</li>\n<li><code class=\"language-text\">\\W</code> ‚Äî Match any non word character (Same as <sup id=\"fnref-a-za-z0‚Äì9_\"><a href=\"#fn-a-za-z0‚Äì9_\" class=\"footnote-ref\">a-za-z0‚Äì9_</a></sup> ).</li>\n<li><code class=\"language-text\">\\S</code> ‚Äî Match a non whitespace character.</li>\n</ul>\n<p><code class=\"language-text\">Quantifiers:</code></p>\n<p>Quantifiers are symbols that have a special meaning in a regular expression.</p>\n<p><code class=\"language-text\">+</code> ‚Äî Matches the preceding expression 1 or more times.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> regex <span class=\"token operator\">=</span> <span class=\"token regex\">/8\\d+/</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>regex<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>regex<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"88899\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>regex<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"8888845\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// true</span></code></pre></div>\n<p><code class=\"language-text\">*</code> - Matches the preceding expression 0 or more times.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> regex <span class=\"token operator\">=</span> <span class=\"token regex\">/go\\*d/</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>regex<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"gd\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>regex<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"god\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>regex<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"good\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>regex<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"goood\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// true</span></code></pre></div>\n<p><code class=\"language-text\">?</code> ‚Äî Matches the preceding expression 0 or 1 time, that is preceding pattern is optional.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> regex <span class=\"token operator\">=</span> <span class=\"token regex\">/goo?d/</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>regex<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"god\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>regex<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"good\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>regex<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"goood\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// false</span></code></pre></div>\n<p><code class=\"language-text\">^</code> ‚Äî Matches the beginning of the string, the regular expression that follows it should be at the start of the test string. i.e the caret (^) matches the start of string.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> regex <span class=\"token operator\">=</span> <span class=\"token regex\">/^g/</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>regex<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"good\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>regex<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bad\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// false</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>regex<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"tag\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// false</span></code></pre></div>\n<p><code class=\"language-text\">$</code> ‚Äî Matches the end of the string, that is the regular expression that precedes it should be at the end of the test string. The dollar ($) sign matches the end of the string.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> regex <span class=\"token operator\">=</span> <span class=\"token regex\">/.com$/</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>regex<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test@testmail.com\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>regex<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test@testmail\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// false</span></code></pre></div>\n<p><code class=\"language-text\">{N}</code> ‚Äî Matches exactly N occurrences of the preceding regular expression.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> regex <span class=\"token operator\">=</span> <span class=\"token regex\">/go{2}d/</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>regex<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"good\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>regex<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"god\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// false</span></code></pre></div>\n<p><code class=\"language-text\">{N,}</code> ‚Äî Matches at least N occurrences of the preceding regular expression.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> regex <span class=\"token operator\">=</span> <span class=\"token regex\">/go{2,}d/</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>regex<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"good\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>regex<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"goood\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>regex<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"gooood\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// true</span></code></pre></div>\n<p><code class=\"language-text\">{N,M}</code> ‚Äî Matches at least N occurrences and at most M occurrences of the preceding regular expression (where M > N).</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> regex <span class=\"token operator\">=</span> <span class=\"token regex\">/go{1,2}d/</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>regex<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"god\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>regex<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"good\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>regex<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"goood\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// false</span></code></pre></div>\n<p><code class=\"language-text\">Alternation X|Y</code> ‚Äî Matches either X or Y.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> regex <span class=\"token operator\">=</span> <span class=\"token regex\">/(green|red) apple/</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>regex<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"green apple\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>regex<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"red apple\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>regex<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"blue apple\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// false</span></code></pre></div>\n<p><strong>Note</strong> ‚Äî If you want to use any <strong>special character</strong> as a part of the expression, say for example you want to match literal <code class=\"language-text\">+</code> or <code class=\"language-text\">.</code>, then you have to escape them with backslash ( <code class=\"language-text\">\\</code> ).</p>\n<p><strong>For example:</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> regex <span class=\"token operator\">=</span> <span class=\"token regex\">/a+b/</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// This won't work</span>\n<span class=\"token keyword\">var</span> regex <span class=\"token operator\">=</span> <span class=\"token regex\">/a\\+b/</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// This will work</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>regex<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a+b\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></code></pre></div>\n<p><code class=\"language-text\">Advanced</code></p>\n<p><code class=\"language-text\">(x)</code> ‚Äî Matches x and remembers the match. These are called capturing groups. This is also used to create sub expressions within a regular expression.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> regex <span class=\"token operator\">=</span> <span class=\"token regex\">/(foo)bar\\1/</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>regex<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"foobarfoo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>regex<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"foobar\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// false</span></code></pre></div>\n<p><strong>Note:</strong> <code class=\"language-text\">\\1</code> - remembers and uses that match from first subexpression within parentheses.</p>\n<p><code class=\"language-text\">(?:x)</code> ‚Äî Matches x and does not remember the match. These are called non capturing groups. Here \\1 won‚Äôt work, it will match the literal \\1.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> regex <span class=\"token operator\">=</span> <span class=\"token regex\">/(?:foo)bar\\1/</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>regex<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"foobarfoo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// false</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>regex<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"foobar\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// false</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>regex<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"foobar\\1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// true</span></code></pre></div>\n<p><code class=\"language-text\">x(?=y)</code> ‚Äî Matches x only if x is followed by y. Also called positive look ahead.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> regex <span class=\"token operator\">=</span> <span class=\"token regex\">/Red(?=Apple)/</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>regex<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"RedApple\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// true</span></code></pre></div>\n<p>‚ú® <code class=\"language-text\">Practicing Regex:</code></p>\n<p><code class=\"language-text\">Match any 10 digit number :</code></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> regex <span class=\"token operator\">=</span> <span class=\"token regex\">/^\\d{10}$/</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>regex<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"9995484545\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// true</span></code></pre></div>\n<p>Let‚Äôs break that down and see what‚Äôs going on up there.</p>\n<ul>\n<li>If we want to enforce that the match must span the whole string, we can add the quantifiers <code class=\"language-text\">^</code> and <code class=\"language-text\">$</code>. The caret <code class=\"language-text\">^</code> matches the start of the input string, whereas the dollar sign $ matches the end. So it would not match if string contain more than 10 digits.</li>\n<li><code class=\"language-text\">\\d</code> matches any digit character.</li>\n<li><code class=\"language-text\">{10}</code> matches the previous expression, in this case <code class=\"language-text\">\\d</code> exactly 10 times. So if the test string contains less than or more than 10 digits, the result will be false.</li>\n</ul>\n<p><code class=\"language-text\">Match a date with following format DD-MM-YYYY or DD-MM-YY</code></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> regex <span class=\"token operator\">=</span> <span class=\"token regex\">/^(\\d{1,2}-){2}\\d{2}(\\d{2})?$/</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>regex<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"01-01-1990\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>regex<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"01-01-90\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>regex<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"01-01-190\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// false</span></code></pre></div>\n<p>Let‚Äôs break that down and see what‚Äôs going on up there.</p>\n<ul>\n<li>Again, we have wrapped the entire regular expression inside <code class=\"language-text\">^</code> and <code class=\"language-text\">\\$</code>, so that the match spans entire string.</li>\n<li><code class=\"language-text\">(</code> start of first subexpression.</li>\n<li><code class=\"language-text\">\\d{1,2}</code> matches at least 1 digit and at most 2 digits.</li>\n<li><code class=\"language-text\">-</code> matches the literal hyphen character.</li>\n<li><code class=\"language-text\">)</code> end of first subexpression.</li>\n<li><code class=\"language-text\">{2}</code> match the first subexpression exactly two times.</li>\n<li><code class=\"language-text\">\\d{2}</code> matches exactly two digits.</li>\n<li><code class=\"language-text\">(\\d{2})?</code> matches exactly two digits. But it‚Äôs optional, so either year contains 2 digits or 4 digits.</li>\n</ul>\n<p><code class=\"language-text\">Matching Anything But a Newline</code></p>\n<p>The expression should match any string with a format like abc.def.ghi.jkl where each variable a, b, c, d, e, f, g, h, i, j, k, l can be any character except new line.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> regex <span class=\"token operator\">=</span> <span class=\"token regex\">/^(.{3}\\.){3}.{3}$/</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>regex<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"123.456.abc.def\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>regex<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1243.446.abc.def\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// false</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>regex<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"abc.def.ghi.jkl\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// true</span></code></pre></div>\n<p>Let‚Äôs break that down and see what‚Äôs going on up there.</p>\n<ul>\n<li>We have wrapped entire regular expression inside <code class=\"language-text\">^</code> and <code class=\"language-text\">\\$</code>, so that the match spans entire string.</li>\n<li><code class=\"language-text\">(</code> start of first sub expression</li>\n<li><code class=\"language-text\">.{3}</code> matches any character except new line for exactly 3 times.</li>\n<li><code class=\"language-text\">\\.</code> matches the literal . period</li>\n<li><code class=\"language-text\">)</code> end of first sub expression</li>\n<li><code class=\"language-text\">{3}</code> matches the first sub expression exactly 3 times.</li>\n<li><code class=\"language-text\">.{3}</code> matches any character except new line for exactly 3 times.</li>\n</ul>","frontmatter":{"title":"A Practical Guide to Regular Expressions (RegEx) In JavaScript","date":"September 05, 2019"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/a-beginners-guide-to-regular-expressions-regex-in-javascript/","previous":{"fields":{"slug":"/how-to-trigger-animation-events-using-react/"},"frontmatter":{"title":"How to Trigger Animation Events using React"}},"next":{"fields":{"slug":"/SOLID-principles-in-OOPS/"},"frontmatter":{"title":"S.O.L.I.D The First 5 Principles of Object Oriented Design"}}}}}