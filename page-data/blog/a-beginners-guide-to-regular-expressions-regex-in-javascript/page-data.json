{"componentChunkName":"component---src-blog-components-blog-post-template-jsx","path":"/blog/a-beginners-guide-to-regular-expressions-regex-in-javascript/","webpackCompilationHash":"19e6bc1347251719f29e","result":{"data":{"markdownRemark":{"id":"8d38633a-5322-5696-b5de-d38271f41541","excerpt":"üöÄ A Practical Guide to Regular Expressions (RegEx) In JavaScript üë®‚Äçüíª By Sukhjinder Arora  Regular expressions are a way to describe patterns in a string data‚Ä¶","html":"<p>üöÄ <a href=\"https://blog.bitsrc.io/a-beginners-guide-to-regular-expressions-regex-in-javascript-9c58feb27eb4\" target=\"_blank\" rel=\"noopener\">A Practical Guide to Regular Expressions (RegEx) In JavaScript</a></p>\n<p>üë®‚Äçüíª By <a href=\"https://blog.bitsrc.io/@Sukhjinder\" target=\"_blank\" rel=\"noopener\">Sukhjinder Arora</a></p>\n<p><code class=\"language-text\">What are Regular Expressions?</code></p>\n<p>Regular expressions are a way to describe patterns in a string data.</p>\n<p><code class=\"language-text\">Creating a Regular Expression</code></p>\n<p>There are two ways to create a regular expression in Javascript. It can be either created with RegExp constructor, or by using forward slashes ( / ) to enclose the pattern.</p>\n<p><code class=\"language-text\">Regular Expression Constructor:</code></p>\n<p><strong>Syntax:</strong> <code class=\"language-text\">new RegExp(pattern[, flags])</code></p>\n<p><strong>Example:</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> regexConst <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RegExp</span><span class=\"token punctuation\">(</span><span class=\"token string\">'abc'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-text\">Regular Expression Literal:</code></p>\n<p><strong>Syntax:</strong> <code class=\"language-text\">/pattern/flags</code></p>\n<p><strong>Example:</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> regexLiteral <span class=\"token operator\">=</span> <span class=\"token regex\">/abc/</span></code></pre></div>\n<p><strong>Note:</strong> Here the flags are optional</p>\n<blockquote>\n<p>Since forward slashes are used to enclose patterns in the above example, you have to escape the forward slash ( / ) with a backslash ( \\ ) if you want to use it as a part of the regex.</p>\n</blockquote>\n<p><code class=\"language-text\">Regular Expressions Methods</code></p>\n<p><code class=\"language-text\">RegExp.prototype.test()</code></p>\n<p>This method is used to test whether a match has been found or not. It accepts a string which we have to test against regular expression and returns true or false depending upon if the match is found or not.</p>\n<p><strong>For example:</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> regex <span class=\"token operator\">=</span> <span class=\"token regex\">/hello/</span>\n<span class=\"token keyword\">var</span> str <span class=\"token operator\">=</span> <span class=\"token string\">'hello world'</span>\n<span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> regex<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// returns true</span></code></pre></div>\n<p><code class=\"language-text\">RegExp.prototype.exec()</code></p>\n<p>This method returns an array containing all the matched groups. It accepts a string that we have to test against a regular expression.</p>\n<p><strong>For example:</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> regex <span class=\"token operator\">=</span> <span class=\"token regex\">/hello/</span>\n<span class=\"token keyword\">var</span> str <span class=\"token operator\">=</span> <span class=\"token string\">'hello world'</span>\n<span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> regex<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// returns [ 'hello', index: 0, input: 'hello world', groups: undefined ]</span>\n<span class=\"token comment\">// 'hello' -> is the matched pattern.</span>\n<span class=\"token comment\">// index: -> Is where the regular expression starts.</span>\n<span class=\"token comment\">// input: -> Is the actual string passed.</span></code></pre></div>\n<p><code class=\"language-text\">Flags:</code></p>\n<p>Regular expressions have five optional flags or modifiers. Let‚Äôs discuss the two most important flags:</p>\n<ul>\n<li><code class=\"language-text\">g</code> ‚Äî Global search, don‚Äôt return after the first match</li>\n<li><code class=\"language-text\">i</code> ‚Äî Case-insensitive search</li>\n</ul>\n<p><code class=\"language-text\">Regular Expression Literal</code></p>\n<p><strong>Syntax</strong> <code class=\"language-text\">/pattern/flags</code></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> regexGlobal <span class=\"token operator\">=</span> <span class=\"token regex\">/abc/g</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>regexGlobal<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'abc abc'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// it will match all the occurence of 'abc', so it won't return</span>\n<span class=\"token comment\">// after first match.</span>\n<span class=\"token keyword\">var</span> regexInsensitive <span class=\"token operator\">=</span> <span class=\"token regex\">/abc/i</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>regexInsensitive<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Abc'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// returns true, because the case of string characters don't matter</span>\n<span class=\"token comment\">// in case-insensitive search.</span></code></pre></div>\n<p><code class=\"language-text\">Regular Expression Constructor</code></p>\n<p><strong>Syntax</strong> <code class=\"language-text\">new RegExp(&#39;pattern&#39;, &#39;flags&#39;)</code></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> regexGlobal <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RegExp</span><span class=\"token punctuation\">(</span><span class=\"token string\">'abc'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'g'</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>regexGlobal<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'abc abc'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// it will match all the occurence of 'abc', so it won't return // after first match.</span>\n<span class=\"token keyword\">var</span> regexInsensitive <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RegExp</span><span class=\"token punctuation\">(</span><span class=\"token string\">'abc'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'i'</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>regexInsensitive<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Abc'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// returns true, because the case of string characters don't matter // in case-insensitive search.</span></code></pre></div>\n<p><code class=\"language-text\">Character groups:</code></p>\n<p><strong>Character set [xyz]</strong></p>\n<p>A character set is a way to match different characters in a single position, it matches any single character in the string from characters present inside the brackets.</p>\n<p><strong>For example:</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> regex <span class=\"token operator\">=</span> <span class=\"token regex\">/[bt]ear/</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>regex<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'tear'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// returns true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>regex<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'bear'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// return true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>regex<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fear'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// return false</span></code></pre></div>\n<p><strong>Note ‚Äî</strong> All the special characters except for caret (^) (Which has entirely different meaning inside the character set) lose their special meaning inside the character set.</p>\n<p><code class=\"language-text\">Negated character set [^xyz]</code></p>\n<p>It matches anything that is not enclosed in the brackets.</p>\n<p><strong>For example:</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> regex <span class=\"token operator\">=</span> <span class=\"token regex\">/[^bt]ear/</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>regex<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'tear'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// returns false</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>regex<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'bear'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// return false</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>regex<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fear'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// return true</span></code></pre></div>\n<p><code class=\"language-text\">Ranges [a-z]</code></p>\n<p>Suppose we want to match all of the letters of an alphabet in a single position, we could write all the letters inside the brackets, but there is an easier way and that is ranges.</p>\n<p><strong>For example:</strong></p>\n<p>[a-h] will match all the letters from a to h. Ranges can also be digits like [0-9] or capital letters like [A-Z].</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> regex <span class=\"token operator\">=</span> <span class=\"token regex\">/[a-z]ear/</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>regex<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fear'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// returns true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>regex<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'tear'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// returns true</span></code></pre></div>\n<p><code class=\"language-text\">Meta-characters</code></p>\n<p>Meta-characters are characters with a special meaning. There are many meta character but I am going to cover the most important ones here.</p>\n<ul>\n<li><code class=\"language-text\">\\d</code> ‚Äî Match any digit character ( same as [0-9] ).</li>\n<li><code class=\"language-text\">\\w</code> ‚Äî Match any word character. A word character is any letter, digit, and underscore. (Same as [a-zA-Z0‚Äì9_] ) i.e alphanumeric character.</li>\n<li><code class=\"language-text\">\\s</code> ‚Äî Match a whitespace character (spaces, tabs etc).</li>\n<li><code class=\"language-text\">\\t</code> ‚Äî Match a tab character only.</li>\n<li><code class=\"language-text\">\\b</code> ‚Äî Find a match at beginning or ending of a word. Also known as word boundary.</li>\n<li><code class=\"language-text\">.</code> ‚Äî (period) Matches any character except for newline.</li>\n<li><code class=\"language-text\">\\D</code> ‚Äî Match any non digit character (same as <sup id=\"fnref-0‚Äì9\"><a href=\"#fn-0‚Äì9\" class=\"footnote-ref\">0‚Äì9</a></sup>).</li>\n<li><code class=\"language-text\">\\W</code> ‚Äî Match any non word character (Same as <sup id=\"fnref-a-za-z0‚Äì9_\"><a href=\"#fn-a-za-z0‚Äì9_\" class=\"footnote-ref\">a-za-z0‚Äì9_</a></sup> ).</li>\n<li><code class=\"language-text\">\\S</code> ‚Äî Match a non whitespace character.</li>\n</ul>\n<p><code class=\"language-text\">Quantifiers:</code></p>\n<p>Quantifiers are symbols that have a special meaning in a regular expression.</p>\n<p><code class=\"language-text\">+</code> ‚Äî Matches the preceding expression 1 or more times.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> regex <span class=\"token operator\">=</span> <span class=\"token regex\">/8\\d+/</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>regex<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>regex<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'88899'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>regex<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'8888845'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// true</span></code></pre></div>\n<p><code class=\"language-text\">*</code> - Matches the preceding expression 0 or more times.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> regex <span class=\"token operator\">=</span> <span class=\"token regex\">/go\\*d/</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>regex<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'gd'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>regex<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'god'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>regex<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'good'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>regex<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'goood'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// true</span></code></pre></div>\n<p><code class=\"language-text\">?</code> ‚Äî Matches the preceding expression 0 or 1 time, that is preceding pattern is optional.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> regex <span class=\"token operator\">=</span> <span class=\"token regex\">/goo?d/</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>regex<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'god'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>regex<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'good'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>regex<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'goood'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// false</span></code></pre></div>\n<p><code class=\"language-text\">^</code> ‚Äî Matches the beginning of the string, the regular expression that follows it should be at the start of the test string. i.e the caret (^) matches the start of string.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> regex <span class=\"token operator\">=</span> <span class=\"token regex\">/^g/</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>regex<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'good'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>regex<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'bad'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// false</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>regex<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'tag'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// false</span></code></pre></div>\n<p><code class=\"language-text\">$</code> ‚Äî Matches the end of the string, that is the regular expression that precedes it should be at the end of the test string. The dollar ($) sign matches the end of the string.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> regex <span class=\"token operator\">=</span> <span class=\"token regex\">/.com$/</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>regex<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'test@testmail.com'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>regex<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'test@testmail'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// false</span></code></pre></div>\n<p><code class=\"language-text\">{N}</code> ‚Äî Matches exactly N occurrences of the preceding regular expression.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> regex <span class=\"token operator\">=</span> <span class=\"token regex\">/go{2}d/</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>regex<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'good'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>regex<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'god'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// false</span></code></pre></div>\n<p><code class=\"language-text\">{N,}</code> ‚Äî Matches at least N occurrences of the preceding regular expression.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> regex <span class=\"token operator\">=</span> <span class=\"token regex\">/go{2,}d/</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>regex<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'good'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>regex<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'goood'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>regex<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'gooood'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// true</span></code></pre></div>\n<p><code class=\"language-text\">{N,M}</code> ‚Äî Matches at least N occurrences and at most M occurrences of the preceding regular expression (where M > N).</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> regex <span class=\"token operator\">=</span> <span class=\"token regex\">/go{1,2}d/</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>regex<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'god'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>regex<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'good'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>regex<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'goood'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// false</span></code></pre></div>\n<p><code class=\"language-text\">Alternation X|Y</code> ‚Äî Matches either X or Y.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> regex <span class=\"token operator\">=</span> <span class=\"token regex\">/(green|red) apple/</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>regex<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'green apple'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>regex<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'red apple'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>regex<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'blue apple'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// false</span></code></pre></div>\n<p><strong>Note</strong> ‚Äî If you want to use any <strong>special character</strong> as a part of the expression, say for example you want to match literal <code class=\"language-text\">+</code> or <code class=\"language-text\">.</code>, then you have to escape them with backslash ( <code class=\"language-text\">\\</code> ).</p>\n<p><strong>For example:</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> regex <span class=\"token operator\">=</span> <span class=\"token operator\">/</span>a<span class=\"token operator\">+</span>b<span class=\"token operator\">/</span> <span class=\"token comment\">// This won't work</span>\n<span class=\"token keyword\">var</span> regex <span class=\"token operator\">=</span> <span class=\"token operator\">/</span>a\\<span class=\"token operator\">+</span>b<span class=\"token operator\">/</span> <span class=\"token comment\">// This will work</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>regex<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a+b'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span></code></pre></div>\n<p><code class=\"language-text\">Advanced</code></p>\n<p><code class=\"language-text\">(x)</code> ‚Äî Matches x and remembers the match. These are called capturing groups. This is also used to create sub expressions within a regular expression.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> regex <span class=\"token operator\">=</span> <span class=\"token regex\">/(foo)bar\\1/</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>regex<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foobarfoo'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>regex<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foobar'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// false</span></code></pre></div>\n<p><code class=\"language-text\">\\1</code> - remembers and uses that match from first subexpression within parentheses.</p>","frontmatter":{"title":"A Practical Guide to Regular Expressions (RegEx) In JavaScript","date":"September 05, 2019"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/a-beginners-guide-to-regular-expressions-regex-in-javascript/","previous":{"fields":{"slug":"/blogs-i-read-on-05-09-2019/"},"frontmatter":{"title":"Blogs I Read on 05-09-2019"}},"next":{"fields":{"slug":"/SOLID-principles-in-OOPS/"},"frontmatter":{"title":"S.O.L.I.D The First 5 Principles of Object Oriented Design"}}}}}