{"componentChunkName":"component---src-blog-components-blog-post-template-jsx","path":"/blog/this-in-javascript/","result":{"data":{"markdownRemark":{"id":"cad1c816-2f8a-5b81-8e48-2f2139c6e56f","excerpt":"🚀 What is “this” in JavaScript? 👨‍💻 By Rajat S ♦  ⛺ ENV: Browser ⛺ ENV: Node ❄ Example: To test this, create a file called index.js with the following code…","html":"<p>🚀 <a href=\"https://blog.bitsrc.io/what-is-this-in-javascript-3b03480514a7\" target=\"_blank\" rel=\"noopener\">What is “this” in JavaScript?</a></p>\n<p>👨‍💻 By <a href=\"https://blog.bitsrc.io/@geeky_writer_\" target=\"_blank\" rel=\"noopener\">Rajat S</a></p>\n<p>♦ <code class=\"language-text\">“this” in Global Environment</code></p>\n<p>⛺ ENV: <strong>Browser</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">></span> <span class=\"token keyword\">this</span> <span class=\"token operator\">===</span> window\n<span class=\"token boolean\">true</span></code></pre></div>\n<p>⛺ ENV: <strong>Node</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Node CLI</span>\n<span class=\"token operator\">></span> <span class=\"token keyword\">this</span> <span class=\"token operator\">===</span> global\n<span class=\"token comment\">// true</span></code></pre></div>\n<p>❄ <strong>Example:</strong></p>\n<p>To test this, create a file called index.js with the following code inside it:</p>\n<p><code class=\"language-text\">console.log(this === global);</code></p>\n<p>Then run this file using the node command:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">$ node index<span class=\"token punctuation\">.</span>js\n<span class=\"token comment\">// false</span></code></pre></div>\n<blockquote>\n<p>The reason for this is that inside a JavaScript file, this equates to <code class=\"language-text\">module.exports</code> and not <code class=\"language-text\">global</code>.</p>\n</blockquote>\n<p>♦ <code class=\"language-text\">“this” inside Functions</code></p>\n<p>In your index.js file, write a very simple function that simply checks if this is equal to the global object.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token operator\">===</span> global<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>If we run this code using <code class=\"language-text\">node</code>, we will the output as <code class=\"language-text\">true</code>. But we add “use strict” at the top of the file and run it again, we will get a false output because now the value of <code class=\"language-text\">this</code> is <code class=\"language-text\">undefined</code>.</p>\n<p><strong>Little Example:</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">Hero</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">heroName<span class=\"token punctuation\">,</span> realName</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>realName <span class=\"token operator\">=</span> realName<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>heroName <span class=\"token operator\">=</span> heroName<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> superman <span class=\"token operator\">=</span> <span class=\"token function\">Hero</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Superman\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Clark Kent\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>superman<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// undefined</span></code></pre></div>\n<p>The reason behind this is that since the function is not written in strict mode, <code class=\"language-text\">this</code> refers to the <code class=\"language-text\">global</code> object.</p>\n<p>If we run this code in strict mode, we will get an error because JavaScript does not allow us to assign properties realName and heroName to undefined. This actually is a good thing because it <strong>prevents us from creating global variables.</strong></p>\n<p>♦ <code class=\"language-text\">“this” inside constructors</code></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">Hero</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">heroName<span class=\"token punctuation\">,</span> realName</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>realName <span class=\"token operator\">=</span> realName<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>heroName <span class=\"token operator\">=</span> heroName<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> superman <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Hero</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Superman\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Clark Kent\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>superman<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Hero { realName: 'Clark Kent', heroName: 'Superman' }</span></code></pre></div>\n<p>JavaScript does not have any special constructor functions. All we can do is convert a function call into a constructor call using <code class=\"language-text\">new</code> operator</p>\n<p>When a constructor call is made, a <code class=\"language-text\">new</code> object is created and set as the function’s this argument. The object is then implicitly returned from the function, unless we have another object that is being returned explicitly.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">Hero</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">heroName<span class=\"token punctuation\">,</span> realName</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>realName <span class=\"token operator\">=</span> realName<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>heroName <span class=\"token operator\">=</span> heroName<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    heroName<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Batman\"</span><span class=\"token punctuation\">,</span>\n    realName<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Bruce Wayne\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> superman <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Hero</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Superman\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Clark Kent\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>superman<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// { heroName: 'Batman', realName: 'Bruce Wayne' }</span></code></pre></div>\n<p>we will see that the above <code class=\"language-text\">return</code> statement overwrites the constructor call.</p>\n<p>The only scenario where the return statement doesn’t overwrite the constructor call is if the return statement tries to return anything that is not an object.</p>\n<p>♦ <code class=\"language-text\">“this” in Methods</code></p>\n<p>When calling a function as a method of an object, this refers to the object, which is then known as the receiver of the function call.</p>\n<p>Here, I have a method <code class=\"language-text\">dialogue</code> inside an object called <code class=\"language-text\">hero</code>. The <code class=\"language-text\">dialogue‘s</code> this value then refers to <code class=\"language-text\">hero</code> itself. So <code class=\"language-text\">hero</code> here will be know as the receiver of the <code class=\"language-text\">dialogue</code> method’s call.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> hero <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  heroName<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Batman\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">dialogue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">I am </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>heroName<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">!</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nhero<span class=\"token punctuation\">.</span><span class=\"token function\">dialogue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// I am Batman!</span></code></pre></div>\n<p>Here, I am storing the reference to <code class=\"language-text\">dialogue</code> inside another variable and calling the variable as a function. Run this with <code class=\"language-text\">node</code> and you will see that <code class=\"language-text\">this</code> returns an <code class=\"language-text\">undefined</code> because the method has lost track of the receiver. <code class=\"language-text\">this</code> now refers to <code class=\"language-text\">global</code> instead of <code class=\"language-text\">hero</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> hero <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  heroName<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Batman\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">dialogue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">I am </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>heroName<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">!</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> saying <span class=\"token operator\">=</span> hero<span class=\"token punctuation\">.</span>dialogue<span class=\"token punctuation\">;</span>\n<span class=\"token function\">saying</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// I am undefined</span></code></pre></div>\n<p>♦ <code class=\"language-text\">call() and apply()</code></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">dialogue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">I am </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>heroName<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> hero <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  heroName<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Batman\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">dialogue</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>hero<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// I am Batman</span>\n<span class=\"token comment\">// or</span>\n<span class=\"token function\">dialogue</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>hero<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// I am Batman</span></code></pre></div>\n<p>But if you are using <code class=\"language-text\">call</code> or <code class=\"language-text\">apply</code> outside of strict mode, then passing null or undefined using call or apply will be ignored by the JavaScript engine. This is one of the reasons why it is usually suggested to always write our code in strict mode.</p>\n<p>♦ <code class=\"language-text\">bind()</code></p>\n<p>The <code class=\"language-text\">bind()</code> method allows us to <strong>permanently</strong> tie a <code class=\"language-text\">this</code> argument to a value. So in the below code snippet, <code class=\"language-text\">bind</code> will create a new <code class=\"language-text\">dialogue</code> function and set its <code class=\"language-text\">this</code> value to <code class=\"language-text\">hero</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> hero <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  heroName<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Batman\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">dialogue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">I am </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>heroName<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> batman <span class=\"token operator\">=</span> hero<span class=\"token punctuation\">.</span><span class=\"token function\">dialogue</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>hero<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> superman <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  heroName<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Superman\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">batman</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>superman<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// I am Batman</span>\n<span class=\"token comment\">// true</span>\n\nhero<span class=\"token punctuation\">.</span><span class=\"token function\">dialogue</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>superman<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// I am Superman</span></code></pre></div>\n<p>By doing so, our <code class=\"language-text\">this</code> cannot be changed by even <code class=\"language-text\">call</code> or <code class=\"language-text\">apply</code> methods.</p>\n<p>♦ <code class=\"language-text\">Catching “this” inside an Arrow Function</code></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> batman <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">bruce</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token operator\">===</span> batman<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">bruce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// true</span></code></pre></div>\n<p>we are storing the value of a <code class=\"language-text\">this</code> in a <strong>variable</strong> and then comparing the value with a <code class=\"language-text\">this</code> value that is inside an <strong>arrow</strong> function. Running <code class=\"language-text\">node index.js</code> in our terminal should give us <code class=\"language-text\">true</code> as output.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> counter <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  count<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">increase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token operator\">++</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\ncounter<span class=\"token punctuation\">.</span><span class=\"token function\">increase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// NaN</span>\n<span class=\"token comment\">// NaN</span>\n<span class=\"token comment\">// NaN</span>\n<span class=\"token comment\">// ...</span></code></pre></div>\n<p>Running this code using <code class=\"language-text\">node index.js</code> will only give an increase list of <code class=\"language-text\">NaNs</code>. This is because <code class=\"language-text\">this.count</code> is not referring to the <code class=\"language-text\">counter</code> object. It actually refers to the <code class=\"language-text\">global</code> object.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> counter <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  count<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">increase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token operator\">++</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\ncounter<span class=\"token punctuation\">.</span><span class=\"token function\">increase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 1</span>\n<span class=\"token comment\">// 2</span>\n<span class=\"token comment\">// 3</span>\n<span class=\"token comment\">// ...</span></code></pre></div>\n<p>Our callback now uses <code class=\"language-text\">this</code> binding from the <code class=\"language-text\">increase</code> method, and the <code class=\"language-text\">counter</code> now works as it should.</p>\n<p><strong>Note:</strong> Do not try to write <code class=\"language-text\">this.count + 1</code> instead of <code class=\"language-text\">++this.count</code>. The former of these two will only increase the value of count once, and return the that value on each iteration.</p>\n<p>♦ <code class=\"language-text\">“this” in Classes</code></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Hero</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">heroName</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>heroName <span class=\"token operator\">=</span> heroName<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">dialogue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">I am </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>heroName<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> batman <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Hero</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Batman\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nbatman<span class=\"token punctuation\">.</span><span class=\"token function\">dialogue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// I am Batman</span></code></pre></div>\n<p><code class=\"language-text\">this</code> inside the constructor refers to the newly created instance of that class. When we call <code class=\"language-text\">batman.dialogue()</code>, we invoke <code class=\"language-text\">dialogue()</code> as a method with batman as a receiver.</p>\n<p>But if we store a reference to the <code class=\"language-text\">dialogue()</code> method, and later invoke it as a function, we once again lose the receiver of the method and the this argument now refers to undefined.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> say <span class=\"token operator\">=</span> batman<span class=\"token punctuation\">.</span><span class=\"token function\">dialogue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The reason for error is that <strong><em>JavaScript classes are implicitly in strict mode</em></strong>. We are invoking <code class=\"language-text\">say()</code> as an function without any autobinding. To solve this, we will need to manually <code class=\"language-text\">bind()</code> to tie this <code class=\"language-text\">dialogue()</code> function to batman.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> say <span class=\"token operator\">=</span> batman<span class=\"token punctuation\">.</span><span class=\"token function\">dialogue</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>batman<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>We can also do this binding inside the constructor method.</p>","frontmatter":{"title":"What is “this” in JavaScript","date":"September 05, 2019"}}},"pageContext":{"slug":"/this-in-javascript/","previous":{"fields":{"slug":"/getting-starter-with-mdx-deck/"},"frontmatter":{"title":"Getting Starter with MDX Deck"}},"next":{"fields":{"slug":"/pure-css-animation-inspiration-on-codepen/"},"frontmatter":{"title":"Inspiration-10 Examples of Pure CSS Animation on CodePen"}}}}}